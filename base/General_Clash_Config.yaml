############################################################ 服务端口 

###* 混合端口，HTTP和SOCKS5均可用的端口，系统代理走这个端口
mixed-port: 7890

###* SOCKS5 代理端口
socks-port: 1080

###* HTTP 代理端口
port: 8080

###* Linux 和 macOS 的 redir 透明代理端口，其他客户端给了会报错
#redir-port: 7891

###* Linux 和 macOS 的 tproxy 透明代理端口，其他客户端给了会报错
#tproxy-port: 7892



############################################################ 全局配置

###* 允许局域网
allow-lan: true

###* 绑定地址，仅允许通过此指定地址访问代理
bind-address: 0.0.0.0

### 允许连接的客户端IP，默认允许全部
lan-allowed-ips:
  - 0.0.0.0/0
  - ::/0

### 禁止链接的IP段，优先级高于允许的白名单，默认为空
lan-disallowed-ips:
  - 

### http(s)/socks/mixed 代理的用户验证
authentication:
  - 

### 允许跳过用户验证的IP
skip-auth-prefixes:
  - 

### 运行模式：规则模式：rule（规则） / global（全局代理）/ direct（全局直连）
mode: rule

###* 日志级别
log-level: warning  # silent / error / warning / info / debug

###* ipv6代理，内核是否接受ipv6流量
ipv6: true

### TCP Keep Alive 设置
keep-alive-idle: 15   # TCP Keep Alive 空闲，当链接无数据活动到达时间后 Clash 发出心跳包检测
keep-alive-interval: 15   # TCP Keep Alive 间隔，如果心跳包未响应，则会等待时间后继续发送，重复最多9次
disable-keep-alive: false   # 禁用 keep alive 机制，即允许链接一直存在。安卓端默认为禁用 keep alive

### 进程匹配模式
find-process-mode: strict   # strict由clash决定是否开启，off为关闭，always为开启

###* 外部控制面板
external-controller: 0.0.0.0:9090
#secret: ""   # 面板访问密钥

###* 外部用户界面
#external-ui: ui   # 静态资源的路径
#external-ui-name: metacubexd    # 外部面板的名字，配合路径合并成特定面板的路径，例如/ui/metacubexd
#external-ui-url: https://mirror.ghproxy.com/https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip   # 外部面板下载地址

### 缓存设置
profile:
  store-selected: true  # 缓存控制面板对策略组的选择，以便下次启动使用
  store-fake-ip: true # 缓存Fake-ip映射关系

### 统一延迟，意义在于让延迟变得好看，没啥卵用
unified-delay: false

### TCP并发
tcp-concurrent: true

###* clash流量出站接口，即接口绑定
#interface-name: en0

### Linux下的路由标记，为流量提供标记
#routing-mark: 6666

### 全局客户端指纹，优先低于 proxy 内的 client-fingerprint，目前支持开启 TLS 传输的 TCP/grpc/WS/HTTP , 支持协议有 VLESS,Vmess 和 trojan
global-client-fingerprint: random

### GEOIP数据模式，默认false是mmdb，true是dat，mmdb是更新的版本（实测有设备会不支持mmdb，例如IPQ6000）
geodata-mode: true

### GEO文件加载模式，默认为memconservative（小内存设备模式）
geodata-loader: standard

### GEO自动更新
geo-auto-update: true
geo-update-interval: 24  # 更新间隔，小时
geox-url:  # Geo数据库下载地址，会按需下载
  geoip: "https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geoip.dat"
  geosite: "https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geosite.dat"
  mmdb: "https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/country.mmdb"
  asn: "https://github.com/xishang0128/geoip/releases/download/latest/GeoLite2-ASN.mmdb"

### 自定义全局UA，默认为clash.meta
global-ua: clash.meta

### 外部资源下载的 ETag 支持，默认为 true，Etag可用于对比请求资源与本地资源的区别，如果一致则发送304状态码，减轻服务端压力
etag-support: true



############################################################ DNS设置

dns:
  enable: true  #* 是否启用dns
  prefer-h3: true  # 优先使用HTTP/3，对于支持的DoH DNS能够加速访问
  listen: 0.0.0.0:1053  # DNS监听端口，非路由器透明代理客户端使用会出现问题
  ipv6: true  # 是否解析ipv6地址，否则返回空结果
  enhanced-mode: redir-host  #* DNS处理模式：redir-host/fake-ip，fake-ip速度更快但可能引入问题（部分网页会打不开，爱快缓存fakeip后无法故障切换）
  fake-ip-range: 198.18.0.1/16  # fakeip 下的 IP 段设置，tun 的默认 IPV4 地址 也使用此值作为参考
  fake-ip-filter-mode: blacklist  # 黑/白名单模式，白名单下 filter 会返回 fake-ip
  fake-ip-filter:  # fakeip过滤，具体行为由黑白名单决定
    - geosite:category-ads-all,category-games,cn,private
  use-hosts: true  # 查询配置文件中的hosts
  use-system-hosts: true  # 查询系统 hosts
  respect-rules: false  # DNS请求遵循clash规则进行分流，需先配置好 proxy-server-nameserver，否则出现先有鸡先有蛋问题
  
  proxy-server-nameserver:  # 解析代理节点域名的服务器，如果不指定则会遵循namepolicy，一般节点域名都属于geo@cn，默认会使用cn的DNS服务器，有污染和识别风险
    - https://8.8.8.8/dns-query  # 谷歌主DNS
    - https://1.1.1.1/dns-query  # Cloudflare主DNS
    - https://1.0.0.1/dns-query  # Cloudflare次DNS
  
  nameserver-policy:  # 指定域名查询的解析服务器策略，优先级高于nameserver组
    geosite:cn,apple,private:  # 匹配中国，苹果域名，私有地址，优先使用运营商DNS
      - dhcp://wan  # 指定网卡获取的DNS，硬路由的wan口网卡名为wan
      - dhcp://eth1  # 指定网卡获取的DNS，软路由的wan口网卡名为最后一张网卡，双口就是eth1
      - 223.5.5.5  # 阿里主DNS
      - 223.6.6.6  # 阿里副DNS
    geosite:geolocation-!cn:  # 匹配非中国域名，应确保可信无污染且国外加密
      - https://8.8.8.8/dns-query  # 谷歌主DNS
      - https://1.1.1.1/dns-query  # Cloudflare主DNS
      - https://1.0.0.1/dns-query  # Cloudflare次DNS
    geosite:category-ads-all:  # 匹配广告域名，直接返回空结果
      - rcode://success  # 直接返回一个success也就是空结果
  
  nameserver:  # 默认DNS组，域名未命中 nameserver-policy，就会用 nameserver/fallback 同时解析，并根据 fallback-filter 选择结果
    - dhcp://wan  # 指定网卡获取的DNS，硬路由的wan口就叫wan
    - dhcp://eth1  # 指定网卡获取的DNS，软路由的wan口一般是最后一张网卡，对于双口就是eth1
    - 223.5.5.5  # 阿里主DNS
    - 223.6.6.6  # 阿里副DNS



############################################################ hosts

hosts:
  'mihomo.mihomo': 127.0.0.1



############################################################ Sniffer设置

sniffer:  # 嗅探的作用是获取握手包中的域名字段，让IP流量也可以匹配域名规则
  enable: true  # 启用sniffer
  force-dns-mapping: true  # 对redir-host类型识别的流量进行强制嗅探
  parse-pure-ip: true  # 对所有未获取到域名的流量进行强制嗅探
  override-destination: true  # 是否使用嗅探结果作为实际访问，默认为 true
  sniff:  # 需要嗅探的协议类型，仅支持 HTTP/TLS/QUIC
    TLS:  # TLS协议，不配置默认嗅探443端口
    HTTP:  # HTTP协议
      ports:    # 端口白名单，只针对下列端口嗅探，不配置则全部嗅探
        - 80
  force-domain:  # 强制嗅探的域名
    - "+.netflix.com"
    - "+.nflxvideo.net"
    - "+.amazonaws.com"
    - "+.media.dssott.com"
  skip-domain:  # 需要跳过嗅探的域名。主要解决部分站点sni字段非域名，导致嗅探结果异常的问题，如米家设备
    - "+.apple.com"
    - Mijia Cloud
    - dlg.io.mi.com
    - "+.oray.com"
    - "+.sunlogin.net"
    - geosite:cn



############################################################ TUN设置

###* TUN设置
tun:
  enable: false  # 是否启用接口，一般情况下不使用tun模式
  stack: mixed  # tun 堆栈模式，如无使用问题，建议使用 mixed：TCP使用system，UDP使用Gvisor
  device: utun0  # 指定TUN网卡名称，MacOS 设备只能使用 utun 开头的网卡名
  auto-route: true  # 自动设置全局路由，可以自动将全局流量路由进入 tun 网卡
  auto-redirect: true  # 仅Linux有效，自动配置 iptables/nftables 以重定向 TCP 连接，需要auto-route: true
  auto-detect-interface: true  # 自动选择流量的出接口（wan）
  dns-hijack:  # dns 劫持，将匹配到的连接导入内部 dns 模块，不指定UDP或tcp则默认为 udp://
    - any:53
    - tcp://any:53
  strict-route: true  # 严格路由，添加防火墙规则禁止Windows使用多DNS，有效防止DNS泄露
  mtu: 9000
  gso: true # 通用分段卸载
  gso-max-size: 65536 # 数据块最大长度
  endpoint-independent-nat: false # 独立于端点的 NAT，性能可能会略有下降，所以不建议在不需要的时候开启
  exclude-package:  # 安卓排除的包名
    - com.tencent.mobileqq  # QQ
    - com.tencent.mm  # 微信
    - com.tencent.androidqqmail  # QQ邮箱
    - com.xingin.xhs  # 小红书
    - idm.internet.download.manager  # 1DM下载器
    - com.sausage.download  # 浩克下载
    - com.eg.android.AlipayGphone  # 支付宝
    - com.sgcc.wsgw.cn  # 网上国网
    - com.taobao.taobao  # 淘宝
    - com.jingdong.app.mall  # 京东
    - com.MobileTicket  # 铁路12306
    - com.chinamworld.main  # 中国建设银行
    - com.jd.jrapp  # 京东金融